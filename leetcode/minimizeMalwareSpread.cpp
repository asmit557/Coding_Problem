class DisjointSet {
    
public:
vector<int> rank, parent, size;
    DisjointSet(int n) {
        rank.resize(n + 1, 0);
        parent.resize(n + 1);
        size.resize(n + 1);
        for (int i = 0; i <= n; i++) {
            parent[i] = i;
            size[i] = 1;
        }
    }

    int findUPar(int node) {
        if (node == parent[node])
            return node;
        return parent[node] = findUPar(parent[node]);
    }

    void unionByRank(int u, int v) {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if (ulp_u == ulp_v) return;
        if (rank[ulp_u] < rank[ulp_v]) {
            parent[ulp_u] = ulp_v;
        }
        else if (rank[ulp_v] < rank[ulp_u]) {
            parent[ulp_v] = ulp_u;
        }
        else {
            parent[ulp_v] = ulp_u;
            rank[ulp_u]++;
        }
    }

    void unionBySize(int u, int v) {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if (ulp_u == ulp_v) return;
        if (size[ulp_u] < size[ulp_v]) {
            parent[ulp_u] = ulp_v;
            size[ulp_v] += size[ulp_u];
        }
        else {
            parent[ulp_v] = ulp_u;
            size[ulp_u] += size[ulp_v];
        }
    }
};
class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        DisjointSet ds(n);
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(graph[i][j]==1){
                    ds.unionBySize(i,j);
                }
            }
        } 
        unordered_map<int,bool> mp;
         int cnt = 0;
        for(int i=0;i<initial.size();i++){
            int par = ds.findUPar(initial[i]);
            if(mp.find(par)==mp.end()){
                cnt += ds.size[par];
                mp[par] = true;
            }
        }
        cout<<cnt<<endl;
        int ans = n;
        int index = initial.size();
        for(int i=0;i<initial.size();i++){
            unordered_map<int,bool> mp;
            int total = 0;
            for(int j=0;j<initial.size();j++){
                if(i==j)continue;
               int par = ds.findUPar(initial[j]);
               if(mp.find(par)==mp.end()){
                total += ds.size[par];
                  mp[par] = true;
               }
            }
            cout<<total<<endl;
            if(total<cnt){
               cnt = total;
               ans = initial[i];
            }else if(total==cnt && initial[i]<ans){
                ans = initial[i];
            }
        }
        return ans;

    }
};
